// Generated by CoffeeScript 1.9.1
(function() {
  var curKey, curObjArr, curVal, delimiterStack, inString, isKey, objArr, prevChar;

  delimiterStack = [];

  objArr = [];

  curObjArr = [];

  prevChar = "";

  inString = false;

  curKey = [];

  curVal = [];

  isKey = false;

  process.stdin.on('data', function(chunk) {
    var c, i, len, prevDelim, results, str;
    str = chunk.toString();
    results = [];
    for (i = 0, len = str.length; i < len; i++) {
      c = str[i];
      if (inString) {
        if (isKey) {
          curKey.push(c);
        } else {
          curVal.push(c);
        }
        if (c === "\"" && prevChar !== "\\") {
          inString = false;
        }
        results.push(prevChar = c);
      } else {
        if (c === "{" || c === "[") {
          if (prevChar === "" || prevChar === ":") {
            delimiterStack.push(c);
            curObjArr.push(c);
            prevChar = c;
            if (c === "{") {
              results.push(isKey = true);
            } else {
              results.push(void 0);
            }
          } else {
            console.warn("prevChar: " + prevChar);
            console.warn("c: " + c);
            console.warn("curObj: " + (curObjArr.join("")));
            throw "input stream not valid json: invalid positioning of '" + c + "' at " + (curObjArr.join(""));
          }
        } else if (c === "]" || c === "}") {
          prevDelim = delimiterStack.pop();
          if (!isKey && curVal.join("").match(/(true|false|null|[0-9\.]+|"[^"]*")/)) {
            if (prevDelim === "[" && c !== "]" || prevDelim === "{" && c !== "}") {
              console.warn("c: " + c);
              console.warn("curObj: " + (curObjArr.join("")));
              throw "input stream not valid json: invalid type of closing '" + c + "' at " + (curObjArr.join(""));
            } else {
              curObjArr.push(curVal.join(""));
              curObjArr.push(c);
              curVal = [];
              if (delimiterStack.length === 0) {
                console.log(JSON.stringify(JSON.parse(curObjArr.join(""))));
                curObjArr = [];
                results.push(prevChar = "");
              } else {
                results.push(prevChar = c);
              }
            }
          } else {
            if (prevDelim === "{" && c === "}") {
              curObjArr.push(c);
              if (delimiterStack.length === 0) {
                console.log(JSON.stringify(JSON.parse(curObjArr.join(""))));
                curObjArr = [];
                results.push(prevChar = "");
              } else {
                results.push(prevChar = c);
              }
            } else if (prevDelim === "[" && c === "]") {
              curObjArr.push(curKey.join(""));
              curObjArr.push(c);
              curKey = [];
              if (delimiterStack.length === 0) {
                console.log(JSON.stringify(JSON.parse(curObjArr.join(""))));
                curObjArr = [];
                results.push(prevChar = "");
              } else {
                results.push(prevChar = c);
              }
            } else {
              if (curVal !== []) {
                console.warn("ASF");
              }
              if (prevChar !== "}") {
                console.warn("ADA");
              }
              console.warn("prevDelim: " + prevDelim);
              console.warn("prevChar: " + prevChar);
              console.warn("isKey: " + isKey);
              console.warn("curVal: " + (curVal.join("")));
              console.warn("c: " + c);
              console.warn("curObj: " + (curObjArr.join("")));
              throw "input stream not valid json: invalid positioning of '" + c + "' at " + (curObjArr.join(""));
            }
          }
        } else if (c === ":") {
          if (delimiterStack[delimiterStack.length - 1] === "[") {
            throw "input stream not valid json: ':' within array at " + (curObjArr.join(""));
          } else if (isKey && prevChar === "\"") {
            isKey = false;
            curObjArr.push(curKey.join(""));
            curKey = [];
            curObjArr.push(c);
            results.push(prevChar = c);
          } else {
            console.warn("c: " + c);
            console.warn("curObj: " + (curObjArr.join("")));
            throw "input stream not valid json: invalid positioning of ':' at " + (curObjArr.join(""));
          }
        } else if (c === ",") {
          if (delimiterStack[delimiterStack.length - 1] === "[" && curKey.join("").match(/(true|false|null|[0-9\.]+|"[^"]*")/)) {
            curObjArr.push(curKey.join(""));
            curKey = [];
            curObjArr.push(c);
            results.push(prevChar = c);
          } else if (!isKey && curVal.join("").match(/(true|false|null|[0-9\.]+|"[^"]*")/)) {
            isKey = true;
            curObjArr.push(curVal.join(""));
            curVal = [];
            curObjArr.push(c);
            results.push(prevChar = c);
          } else if (prevChar === "]" || prevChar === "}") {
            curObjArr.push(c);
            curVal = [];
            curKey = [];
            isKey = true;
            results.push(prevChar = c);
          } else {
            console.warn("isKey: " + isKey);
            console.warn("prevChar: " + prevChar);
            console.warn("curVal: " + (curVal.join("")));
            console.warn("c: " + c);
            console.warn("curObj: " + (curObjArr.join("")));
            throw "input stream not valid json: invalid positioning of ',' at " + (curObjArr.join(""));
          }
        } else if (c === "\"") {
          if (prevChar === ":") {
            inString = true;
            curVal.push(c);
            results.push(prevChar = c);
          } else if (prevChar === "," || prevChar === "{" || prevChar === "[") {
            isKey = true;
            inString = true;
            curKey.push(c);
            results.push(prevChar = c);
          } else {
            console.warn("c: " + c);
            console.warn("curObj: " + (curObjArr.join("")));
            throw "input stream not valid json: invalid positioning of '\"' at " + (curObjArr.join(""));
          }
        } else if (c.match(/[truefasnl]/)) {
          if (!isKey) {
            curVal.push(c);
            results.push(prevChar = c);
          } else if (delimiterStack[delimiterStack.length - 1] === "[") {
            curKey.push(c);
            results.push(prevChar = c);
          } else {
            console.warn("c: " + c);
            console.warn("curObj: " + (curObjArr.join("")));
            throw "input stream not valid json: invalid positioning of 'true/false' at " + (curObjArr.join(""));
          }
        } else if (c.match(/[0-9\.]/)) {
          if (!isKey) {
            curVal.push(c);
            results.push(prevChar = c);
          } else if (delimiterStack[delimiterStack.length - 1] === "[") {
            curKey.push(c);
            results.push(prevChar = c);
          } else {
            console.warn("c: " + c);
            console.warn("curObj: " + (curObjArr.join("")));
            throw "input stream not valid json: invalid positioning of numberic literal at " + (curObjArr.join(""));
          }
        } else if (c.match(/\s/)) {

        } else {
          console.warn("c: " + c);
          console.warn("curObj: " + (curObjArr.join("")));
          throw "input stream not valid json: invalid char: " + c;
        }
      }
    }
    return results;
  });

}).call(this);
