// Generated by CoffeeScript 1.9.1
(function() {
  var NodeObjectStream, Transform, util;

  util = require('util');

  Transform = require('stream').Transform;

  NodeObjectStream = function() {
    if (!this instanceof NodeObjectStream) {
      return new NodeObjectStream;
    } else {
      Transform.call(this, {
        readableObjectMode: true
      });
      this.delimiterStack = [];
      this.curObjArr = [];
      this.prevChar = "";
      this.inString = false;
      this.curKey = [];
      this.curVal = [];
      this.isKey = false;
      return this.on('pipe', (function(_this) {
        return function(src) {
          return src.on('end', function() {
            return _this.emit('end');
          });
        };
      })(this));
    }
  };

  util.inherits(NodeObjectStream, Transform);

  NodeObjectStream.prototype._flush = function(chunk, encoding, callback) {
    var err, obj, ref, rem;
    rem = (ref = this._buffer) != null ? ref.trim() : void 0;
    if (rem) {
      try {
        obj = JSON.parse(rem);
      } catch (_error) {
        err = _error;
        this.emit('error', err);
        return;
      }
      this.push(obj);
    }
    return typeof callback === "function" ? callback() : void 0;
  };

  NodeObjectStream.prototype._transform = function(chunk, encoding, callback) {
    var c, i, len, prevDelim, str;
    str = chunk.toString();
    for (i = 0, len = str.length; i < len; i++) {
      c = str[i];
      if (this.inString) {
        if (this.isKey) {
          this.curKey.push(c);
        } else {
          this.curVal.push(c);
        }
        if (c === "\"" && this.prevChar !== "\\") {
          this.inString = false;
        }
        this.prevChar = c;
      } else {
        if (c === "{" || c === "[") {
          if (this.prevChar === "" || this.prevChar === ":") {
            this.delimiterStack.push(c);
            this.curObjArr.push(c);
            this.prevChar = c;
            if (c === "{") {
              this.isKey = true;
            }
          } else {
            this.emit('error', new Error("input stream not valid json: invalid positioning of '" + c + "' at " + (this.curObjArr.join(""))));
          }
        } else if (c === "]" || c === "}") {
          prevDelim = this.delimiterStack.pop();
          if (!this.isKey && this.curVal.join("").match(/(true|false|null|[0-9\.]+|"[^"]*")/)) {
            if (prevDelim === "[" && c !== "]" || prevDelim === "{" && c !== "}") {
              this.emit('error', new Error("input stream not valid json: invalid type of closing '" + c + "' at " + (this.curObjArr.join(""))));
            } else {
              this.curObjArr.push(this.curVal.join(""));
              this.curObjArr.push(c);
              this.curVal = [];
              if (this.delimiterStack.length === 0) {
                this.emit('object', JSON.parse(this.curObjArr.join("")));
                this.curObjArr = [];
                this.prevChar = "";
              } else {
                this.prevChar = c;
              }
            }
          } else {
            if (prevDelim === "{" && c === "}") {
              this.curObjArr.push(c);
              if (this.delimiterStack.length === 0) {
                this.emit('object', JSON.parse(this.curObjArr.join("")));
                this.curObjArr = [];
                this.prevChar = "";
              } else {
                this.prevChar = c;
              }
            } else if (prevDelim === "[" && c === "]") {
              this.curObjArr.push(this.curKey.join(""));
              this.curObjArr.push(c);
              this.curKey = [];
              if (this.delimiterStack.length === 0) {
                this.emit('object', JSON.parse(this.curObjArr.join("")));
                this.curObjArr = [];
                this.prevChar = "";
              } else {
                this.prevChar = c;
              }
            } else {
              this.emit('error', new Error("input stream not valid json: invalid positioning of '" + c + "' at " + (this.curObjArr.join(""))));
            }
          }
        } else if (c === ":") {
          if (this.delimiterStack[this.delimiterStack.length - 1] === "[") {
            this.emit('error', new Error("input stream not valid json: ':' within array at " + (this.curObjArr.join(""))));
          } else if (this.isKey && this.prevChar === "\"") {
            this.isKey = false;
            this.curObjArr.push(this.curKey.join(""));
            this.curKey = [];
            this.curObjArr.push(c);
            this.prevChar = c;
          } else {
            this.emit('error', new Error("input stream not valid json: invalid positioning of ':' at " + (this.curObjArr.join(""))));
          }
        } else if (c === ",") {
          if (this.delimiterStack[this.delimiterStack.length - 1] === "[" && this.curKey.join("").match(/(true|false|null|[0-9\.]+|"[^"]*")/)) {
            this.curObjArr.push(this.curKey.join(""));
            this.curKey = [];
            this.curObjArr.push(c);
            this.prevChar = c;
          } else if (!this.isKey && this.curVal.join("").match(/(true|false|null|[0-9\.]+|"[^"]*")/)) {
            this.isKey = true;
            this.curObjArr.push(this.curVal.join(""));
            this.curVal = [];
            this.curObjArr.push(c);
            this.prevChar = c;
          } else if (this.prevChar === "]" || this.prevChar === "}") {
            this.curObjArr.push(c);
            this.curVal = [];
            this.curKey = [];
            this.isKey = true;
            this.prevChar = c;
          } else {
            this.emit('error', new Error("input stream not valid json: invalid positioning of ',' at " + (this.curObjArr.join(""))));
          }
        } else if (c === "\"") {
          if (this.prevChar === ":") {
            this.inString = true;
            this.curVal.push(c);
            this.prevChar = c;
          } else if (this.prevChar === "," || this.prevChar === "{" || this.prevChar === "[") {
            this.isKey = true;
            this.inString = true;
            this.curKey.push(c);
            this.prevChar = c;
          } else {
            this.emit('error', new Error("input stream not valid json: invalid positioning of '\"' at " + (this.curObjArr.join(""))));
          }
        } else if (c.match(/[truefasnl]/)) {
          if (!this.isKey) {
            this.curVal.push(c);
            this.prevChar = c;
          } else if (this.delimiterStack[this.delimiterStack.length - 1] === "[") {
            this.curKey.push(c);
            this.prevChar = c;
          } else {
            this.emit('error', new Error("input stream not valid json: invalid positioning of 'true/false' at " + (this.curObjArr.join(""))));
          }
        } else if (c.match(/[0-9\.]/)) {
          if (!this.isKey) {
            this.curVal.push(c);
            this.prevChar = c;
          } else if (this.delimiterStack[this.delimiterStack.length - 1] === "[") {
            this.curKey.push(c);
            this.prevChar = c;
          } else {
            this.emit('error', new Error("input stream not valid json: invalid positioning of numberic literal at " + (this.curObjArr.join(""))));
          }
        } else if (c.match(/\s/)) {

        } else {
          this.emit('error', new Error("input stream not valid json: invalid char: " + c));
        }
      }
    }
    this.push(chunk);
    return typeof callback === "function" ? callback() : void 0;
  };

  module.exports = NodeObjectStream;

}).call(this);
